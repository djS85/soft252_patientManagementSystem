/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panels;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.reflect.TypeToken;
import frames.ViewMain;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import static panels.PanelType.ADMIN_MAIN;
import static panels.PanelType.DOCTOR_MAIN;
import static panels.PanelType.PATIENT_MAIN;
import static panels.PanelType.SEC_MAIN;
import patientmanagementsystem.User;
import patientmanagementsystem.admin_system.Administrator;
import patientmanagementsystem.doctor_system.Doctor;
import patientmanagementsystem.patient_system.Patient;
import patientmanagementsystem.patient_system.Patients;
import patientmanagementsystem.secretary_system.Secretary;

/**
 *
 * @author djs85
 */
public class LogInPanel extends javax.swing.JPanel {

    /**
     * Creates new form LogInPanel
     */
    
    // Laptop
//    protected final String patientPath = "C:\\Users\\djs85\\Desktop\\soft252_patientManagementSystem\\PMS\\PatientManagementSystem\\src\\json\\patients.json";
//    protected final String adminPath = "C:\\Users\\djs85\\Desktop\\soft252_patientManagementSystem\\PMS\\PatientManagementSystem\\src\\json\\admin.json";
//    protected final String secPath = "C:\\Users\\djs85\\Desktop\\soft252_patientManagementSystem\\PMS\\PatientManagementSystem\\src\\json\\secretary.json";
//    protected final String docPath = "C:\\Users\\djs85\\Desktop\\soft252_patientManagementSystem\\PMS\\PatientManagementSystem\\src\\json\\doctors.json";

    // Desktop
    protected final String patientPath = "C:\\Users\\Dyn\\Desktop\\soft252_patientManagementSystem\\PMS\\PatientManagementSystem\\src\\json\\patients.json";
    protected final String adminPath = "C:\\Users\\Dyn\\Desktop\\soft252_patientManagementSystem\\PMS\\PatientManagementSystem\\src\\json\\admin.json";
    protected final String secPath = "C:\\Users\\Dyn\\Desktop\\soft252_patientManagementSystem\\PMS\\PatientManagementSystem\\src\\json\\secretary.json";
    protected final String docPath = "C:\\Users\\Dyn\\Desktop\\soft252_patientManagementSystem\\PMS\\PatientManagementSystem\\src\\json\\doctors.json";
    
    protected ViewMain parent;
    
    protected Patients patients;
    
    protected Gson gson;
    
    protected ArrayList<Patient> _patients;
    
    protected Administrator admin;
    protected Patient patient;
    protected Doctor doctor;
    protected Secretary secretary;
    
    public LogInPanel(ViewMain _parent) {
        this.parent = _parent;
        this.gson = new GsonBuilder().setPrettyPrinting().create();
        this._patients = new ArrayList<Patient>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Log In");

        jLabel2.setText("User ID :");

        jLabel3.setText("Password :");

        jButton1.setText("Log In");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(269, 269, 269)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(201, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(149, 149, 149)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 343, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        String userId = jTextField1.getText().toString().toUpperCase();
        String pwd = jTextField2.getText().toString();
        
//        System.out.println(userId + " " + pwd);
        
        char c = userId.charAt(0);
        
        switch (c) {
            case 'P':
                if ( searchPatients(userId, pwd) ) {
                    parent.setPanel(PATIENT_MAIN);
                }
                break;
            case 'A':
                if ( searchAdmins(userId, pwd) ) {
                    parent.setPanel(ADMIN_MAIN);
                }
                break;
                
            case 'D':
                if ( searchDoctors(userId, pwd) ) {
                    parent.setPanel(DOCTOR_MAIN);
                }
                break;
                
            case 'S':
                if ( searchSecretarys(userId, pwd) ) {
                    parent.setPanel(SEC_MAIN);
                }
                
                
            default:
                break;
        }
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    public boolean searchSecretarys(String _userId, String _pwd) {
        
        boolean foundSecAccount = false;
        
        ArrayList<Secretary> secs = new ArrayList<Secretary>();
        
        try ( FileReader fr = new FileReader(secPath) ) {            
            secs = gson.fromJson(fr, new TypeToken<ArrayList<Secretary>>() {}.getType());
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
        for ( int i = 0; i < secs.size(); i++ ) {
            if ( secs.get(i).getPassword().equalsIgnoreCase(_pwd) && secs.get(i).getUserID().equalsIgnoreCase(_userId) ) {
                foundSecAccount = true;                
                JsonObject obj = new JsonObject();
                obj.addProperty("firstname", secs.get(i).getFirstname());
                obj.addProperty("surname", secs.get(i).getSurname());
                obj.addProperty("address", secs.get(i).getAddress());
                obj.addProperty("age", secs.get(i).getAge());
                obj.addProperty("password", _pwd);
                obj.addProperty("userID", _userId);
                obj.addProperty("accountApproved", true);
                createSecretaryFromJson(obj);
                setLoggedInAdmin();
            }
        }
        
        return foundSecAccount;
        
    }
    
    public boolean searchDoctors(String _userId, String _pwd) {
        
        boolean foundDoctorAccount = false;
        
        ArrayList<Doctor> docs = new ArrayList<Doctor>();
        
        try ( FileReader fr = new FileReader(docPath) ) {            
            docs = gson.fromJson(fr, new TypeToken<ArrayList<Doctor>>() {}.getType());
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
        for ( int i = 0; i < docs.size(); i++ ) {
            if ( docs.get(i).getPassword().equalsIgnoreCase(_pwd) && docs.get(i).getUserID().equalsIgnoreCase(_userId) ) {
                foundDoctorAccount = true;                
                JsonObject obj = new JsonObject();
                obj.addProperty("firstname", docs.get(i).getFirstname());
                obj.addProperty("surname", docs.get(i).getSurname());
                obj.addProperty("address", docs.get(i).getAddress());
                obj.addProperty("age", docs.get(i).getAge());
                obj.addProperty("password", _pwd);
                obj.addProperty("userID", _userId);
                obj.addProperty("accountApproved", true);
                createDoctorFromJson(obj);
                setLoggedInDoctor();
            }
        }
        
        return foundDoctorAccount;
        
    }
    
    public boolean searchAdmins(String _userId, String _pwd) {
    
        boolean foundAdminAccount = false;
        
        ArrayList<Doctor> docs = new ArrayList<Doctor>();
        
        try ( FileReader fr = new FileReader(adminPath) ) {            
            docs = gson.fromJson(fr, new TypeToken<ArrayList<Doctor>>() {}.getType());
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
//        for ( int i = 0; i < admins.size(); i++ ) {
//            System.out.println(admins.get(i).getFullName());
//        }
        
        for ( int i = 0; i < docs.size(); i++ ) {
            if ( docs.get(i).getPassword().equalsIgnoreCase(_pwd) && docs.get(i).getUserID().equalsIgnoreCase(_userId) ) {
                foundAdminAccount = true;                
                JsonObject obj = new JsonObject();
                obj.addProperty("firstname", docs.get(i).getFirstname());
                obj.addProperty("surname", docs.get(i).getSurname());
                obj.addProperty("address", docs.get(i).getAddress());
                obj.addProperty("age", docs.get(i).getAge());
                obj.addProperty("password", _pwd);
                obj.addProperty("userID", _userId);
                obj.addProperty("accountApproved", true);
                createDoctorFromJson(obj);
                setLoggedInDoctor();
            }
        }
        
        return foundAdminAccount;
        
    }
    
    public boolean searchPatients(String _userId, String _pwd) {
        
        boolean foundPatientAccount = false;
        
        patients = new Patients();
        
        try ( FileReader fr = new FileReader(patientPath) ) {            
            patients.setPatients(gson.fromJson(fr, new TypeToken<ArrayList<Patient>>() {}.getType()));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
        // copy the patient array so as not to tamper with it whe searching through it.
        _patients = patients.getPatients();
        
        for ( int i = 0; i < _patients.size(); i++ ) {
            if ( _patients.get(i).getPassword().equalsIgnoreCase(_pwd) && _patients.get(i).getUserID().equalsIgnoreCase(_userId) ) {
                foundPatientAccount = true;                
                JsonObject obj = new JsonObject();
                obj.addProperty("firstname", _patients.get(i).getFirstname());
                obj.addProperty("surname", _patients.get(i).getSurname());
                obj.addProperty("address", _patients.get(i).getAddress());
                obj.addProperty("age", _patients.get(i).getAge());
                obj.addProperty("password", _pwd);
                obj.addProperty("userID", _userId);
                obj.addProperty("accountApproved", _patients.get(i).isAccountApproved());
                createPatientFromJson(obj);
                setLoggedInPatient();
            }
        }
        
        return foundPatientAccount;
        
    }
    
    public void createPatientFromJson(JsonObject _obj) {
        patient = gson.fromJson(_obj, Patient.class);
//        String json = gson.toJson(patient);
//        System.out.println(json);
    }
    
    public void createAdminFromJson(JsonObject _obj) {
        admin = gson.fromJson(_obj, Administrator.class);
//        String json = gson.toJson(admin);
//        System.out.println(json);
    }
    
    public void createDoctorFromJson(JsonObject _obj) {
        doctor = gson.fromJson(_obj, Doctor.class);
    }
    
    public void createSecretaryFromJson(JsonObject _obj) {
        secretary = gson.fromJson(_obj, Secretary.class);
    }
    
    public void setLoggedInAdmin() {
        parent.setLoggedInAdmin(this.admin);
    }
    
    public void setLoggedInPatient() {
        parent.setLoggedInPatient(this.patient);
    }
    
    public void setLoggedInDoctor() {
        parent.setLoggedInDoctor(this.doctor);
    }
    
    public void setLoggedInSecretary() {
        parent.setLoggedInSecretary(this.secretary);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
